@model CLIP.Models.PlantMonitoring

@{
    ViewBag.Title = "Update Monitoring Status";
    var isAdmin = ViewBag.IsAdmin;
}

<h2>Update Monitoring Status</h2>

<div class="row mb-3">
    <div class="col-md-12">
        <div class="alert alert-info">
            <strong>Monitoring:</strong> @Model.Monitoring.MonitoringName |
            <strong>Plant:</strong> @Model.Plant.PlantName |
            <strong>Area:</strong> @(string.IsNullOrEmpty(Model.Area) ? "N/A" : Model.Area) |
            <strong>Process Status:</strong> <span class="badge @Model.ProcStatusCssClass">@Model.ProcStatus</span> |
            <strong>Expiration Status:</strong> <span class="badge @Model.ExpStatusCssClass">@Model.ExpStatus</span>
        </div>
    </div>
</div>

@if (TempData["ErrorMessage"] != null)
{
    <div class="alert alert-danger alert-dismissible fade show mb-3" role="alert">
        <strong>Error:</strong> @TempData["ErrorMessage"]
        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
    </div>
}

@if (TempData["SuccessMessage"] != null)
{
    <div class="alert alert-success alert-dismissible fade show mb-3" role="alert">
        <i class="fas fa-check-circle me-2"></i> @TempData["SuccessMessage"]
        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
    </div>
}

<!-- Expiry Date & Remarks Form -->
@using (Html.BeginForm("UpdateExpiry", "PlantMonitoring", FormMethod.Post))
{
    @Html.AntiForgeryToken()
    @Html.HiddenFor(model => model.Id)

    <div class="row">
        <div class="col-md-12 mb-4">
            <div class="card">
                <div class="card-header d-flex justify-content-between align-items-center">
                    <h5 class="mb-0">Expiry Date & Remarks</h5>
                    <button type="submit" class="btn btn-sm btn-primary" title="Save Expiry & Remarks">
                        <i class="fas fa-save"></i> Save
                    </button>
                </div>
                <div class="card-body">
                    <div class="form-group row">
                        <label class="col-sm-2 col-form-label">Expiry Date:</label>
                        <div class="col-sm-4">
                            @Html.TextBoxFor(model => model.ExpDate, "{0:yyyy-MM-dd}", new { @class = "form-control", type = "date" })
                            <small class="form-text text-muted">Will be automatically set to 1 year after completion date when work is completed.</small>
                        </div>
                    </div>
                    
                    <div class="form-group row">
                        <label class="col-sm-2 col-form-label">Remarks:</label>
                        <div class="col-sm-10">
                            @Html.TextAreaFor(model => model.Remarks, new { @class = "form-control", rows = 3 })
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
}

<div class="row">
    <!-- Quotation Phase Form -->
        <div class="col-md-4">
        @using (Html.BeginForm("UpdateQuotation", "PlantMonitoring", FormMethod.Post, new { enctype = "multipart/form-data" }))
        {
            @Html.AntiForgeryToken()
            @Html.HiddenFor(model => model.Id)
            
            <div class="card mb-4">
                <div class="card-header bg-primary text-white d-flex justify-content-between align-items-center">
                    <h5 class="mb-0">Quotation Phase</h5>
                    <button type="submit" class="btn btn-sm btn-light" title="Save Quotation Phase">
                        <i class="fas fa-save"></i>
                    </button>
                </div>
                <div class="card-body">
                    <div class="form-group row">
                        <label class="col-sm-4 col-form-label">Submit:</label>
                        <div class="col-sm-8">
                            @Html.TextBoxFor(model => model.QuoteSubmitDate, "{0:yyyy-MM-dd}", new { @class = "form-control", type = "date" })
                        </div>
                    </div>
                    
                    <div class="form-group row">
                        <label class="col-sm-4 col-form-label">Start:</label>
                        <div class="col-sm-8">
                            @Html.TextBoxFor(model => model.QuoteDate, "{0:yyyy-MM-dd}", new { @class = "form-control", type = "date" })
                        </div>
                    </div>
                    
                    <div class="form-group row">
                        <label class="col-sm-4 col-form-label">Complete:</label>
                        <div class="col-sm-8">
                            @Html.TextBoxFor(model => model.QuoteCompleteDate, "{0:yyyy-MM-dd}", new { @class = "form-control", type = "date" })
                        </div>
                    </div>
                    
                    <div class="form-group row">
                        <label class="col-sm-4 col-form-label">Assigned:</label>
                        <div class="col-sm-8">
                            @Html.EditorFor(model => model.QuoteUserAssign, new { htmlAttributes = new { @class = "form-control assignee-field", required = "required" } })
                            <div class="invalid-feedback">Please assign someone to this phase.</div>
                        </div>
                    </div>
                    
                    <div class="form-group row">
                        <label class="col-sm-4 col-form-label">Document:</label>
                        <div class="col-sm-8">
                            <input type="file" name="quoteDocument" class="form-control-file file-upload" accept=".pdf,.doc,.docx,.xls,.xlsx,.txt,.jpg,.jpeg,.png" data-max-size="20" />
                            <small class="form-text text-muted">Max file size: 20MB</small>
                            @if (!string.IsNullOrEmpty(Model.QuoteDoc))
                            {
                                <div class="mt-2">
                                    <a href="@Url.Content(Model.QuoteDoc)" target="_blank" class="btn btn-sm btn-info" title="View Document">
                                        <i class="fas fa-file-download"></i>
                                    </a>
                                </div>
                            }
                        </div>
                    </div>
                </div>
            </div>
        }
        </div>
        
    <!-- Preparation Phase Form -->
        <div class="col-md-4">
        @using (Html.BeginForm("UpdateEpr", "PlantMonitoring", FormMethod.Post, new { enctype = "multipart/form-data" }))
        {
            @Html.AntiForgeryToken()
            @Html.HiddenFor(model => model.Id)
            
            <div class="card mb-4">
                <div class="card-header bg-warning text-white d-flex justify-content-between align-items-center">
                    <h5 class="mb-0">Raise ePR Phase</h5>
                    <button type="submit" class="btn btn-sm btn-light" title="Save ePR Phase">
                        <i class="fas fa-save"></i>
                    </button>
                </div>
                <div class="card-body">
                    <div class="form-group row">
                        <label class="col-sm-4 col-form-label">Submit:</label>
                        <div class="col-sm-8">
                            @Html.TextBoxFor(model => model.EprSubmitDate, "{0:yyyy-MM-dd}", new { @class = "form-control", type = "date" })
                        </div>
                    </div>
                    
                    <div class="form-group row">
                        <label class="col-sm-4 col-form-label">Start:</label>
                        <div class="col-sm-8">
                            @Html.TextBoxFor(model => model.EprDate, "{0:yyyy-MM-dd}", new { @class = "form-control", type = "date" })
                        </div>
                    </div>
                    
                    <div class="form-group row">
                        <label class="col-sm-4 col-form-label">Complete:</label>
                        <div class="col-sm-8">
                            @Html.TextBoxFor(model => model.EprCompleteDate, "{0:yyyy-MM-dd}", new { @class = "form-control", type = "date" })
                        </div>
                    </div>
                    
                    <div class="form-group row">
                        <label class="col-sm-4 col-form-label">Assigned:</label>
                        <div class="col-sm-8">
                            @Html.EditorFor(model => model.EprUserAssign, new { htmlAttributes = new { @class = "form-control assignee-field", required = "required" } })
                            <div class="invalid-feedback">Please assign someone to this phase.</div>
                        </div>
                    </div>
                    
                    <div class="form-group row">
                        <label class="col-sm-4 col-form-label">Document:</label>
                        <div class="col-sm-8">
                            <input type="file" name="eprDocument" class="form-control-file file-upload" accept=".pdf,.doc,.docx,.xls,.xlsx,.txt,.jpg,.jpeg,.png" data-max-size="20" />
                            <small class="form-text text-muted">Max file size: 20MB</small>
                            @if (!string.IsNullOrEmpty(Model.EprDoc))
                            {
                                <div class="mt-2">
                                    <a href="@Url.Content(Model.EprDoc)" target="_blank" class="btn btn-sm btn-info" title="View Document">
                                        <i class="fas fa-file-download"></i>
                                    </a>
                                </div>
                            }
                        </div>
                    </div>
                </div>
            </div>
        }
        </div>
        
    <!-- Work Execution Phase Form -->
        <div class="col-md-4">
        @using (Html.BeginForm("UpdateWork", "PlantMonitoring", FormMethod.Post, new { enctype = "multipart/form-data" }))
        {
            @Html.AntiForgeryToken()
            @Html.HiddenFor(model => model.Id)
            
            <div class="card mb-4">
                <div class="card-header bg-success text-white d-flex justify-content-between align-items-center">
                    <h5 class="mb-0">Work Execution Phase</h5>
                    <button type="submit" class="btn btn-sm btn-light" title="Save Work Phase">
                        <i class="fas fa-save"></i>
                    </button>
                </div>
                <div class="card-body">
                    <div class="form-group row">
                        <label class="col-sm-4 col-form-label">Submit:</label>
                        <div class="col-sm-8">
                            @Html.TextBoxFor(model => model.WorkSubmitDate, "{0:yyyy-MM-dd}", new { @class = "form-control", type = "date" })
                        </div>
                    </div>
                    
                    <div class="form-group row">
                        <label class="col-sm-4 col-form-label">Start:</label>
                        <div class="col-sm-8">
                            @Html.TextBoxFor(model => model.WorkDate, "{0:yyyy-MM-dd}", new { @class = "form-control", type = "date" })
                        </div>
                    </div>
                    
                    <div class="form-group row">
                        <label class="col-sm-4 col-form-label">Complete:</label>
                        <div class="col-sm-8">
                            @Html.TextBoxFor(model => model.WorkCompleteDate, "{0:yyyy-MM-dd}", new { @class = "form-control", type = "date" })
                            <small class="form-text text-muted">When completed, renewal date will be set to 1 year from this date.</small>
                        </div>
                    </div>
                    
                    <div class="form-group row">
                        <label class="col-sm-4 col-form-label">Assigned:</label>
                        <div class="col-sm-8">
                            @Html.EditorFor(model => model.WorkUserAssign, new { htmlAttributes = new { @class = "form-control assignee-field", required = "required" } })
                            <div class="invalid-feedback">Please assign someone to this phase.</div>
                        </div>
                    </div>
                    
                    <div class="form-group row">
                        <label class="col-sm-4 col-form-label">Document:</label>
                        <div class="col-sm-8">
                            <input type="file" name="workDocument" class="form-control-file file-upload" accept=".pdf,.doc,.docx,.xls,.xlsx,.txt,.jpg,.jpeg,.png" data-max-size="20" />
                            <small class="form-text text-muted">Max file size: 20MB</small>
                            @if (!string.IsNullOrEmpty(Model.WorkDoc))
                            {
                                <div class="mt-2">
                                    <a href="@Url.Content(Model.WorkDoc)" target="_blank" class="btn btn-sm btn-info" title="View Document">
                                        <i class="fas fa-file-download"></i>
                                    </a>
                                </div>
                            }
                        </div>
                    </div>
                </div>
            </div>
        }
        </div>
    </div>

<div class="row mb-4">
        <div class="col-md-12">
        <div class="card">
            <div class="card-body">
                <a href="@Url.Action("Details", new { id = Model.Id })" class="btn btn-secondary" title="Back to Details">
                    <i class="fas fa-arrow-left"></i> Back to Details
                </a>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
    <script>
        $(document).ready(function() {
            // File size validation
            $('.file-upload').on('change', function() {
                var fileInput = $(this)[0];
                var maxSize = parseInt($(this).data('max-size')) * 1024 * 1024; // Convert MB to bytes
                
                if (fileInput.files.length > 0) {
                    var fileSize = fileInput.files[0].size; // in bytes
                    if (fileSize > maxSize) {
                        alert('File size exceeds the limit of 20MB. Please choose a smaller file.');
                        $(this).val(''); // Clear the file input
                        return false;
                    }
                }
            });

            // Form submission validation
            $('form').on('submit', function(e) {
                var isValid = true;
                
                // Validate file uploads
                $(this).find('.file-upload').each(function() {
                    var fileInput = $(this)[0];
                    var maxSize = parseInt($(this).data('max-size')) * 1024 * 1024;
                    
                    if (fileInput.files.length > 0) {
                        var fileSize = fileInput.files[0].size;
                        if (fileSize > maxSize) {
                            alert('File size exceeds the limit of 20MB. Please choose a smaller file.');
                            $(this).val('');
                            isValid = false;
                            return false;
                        }
                    }
                });
                
                // Validate assignee fields
                $(this).find('.assignee-field').each(function() {
                    if ($(this).val().trim() === '') {
                        if ($(this).closest('.card-body').find('input[type="date"]').filter(function() { 
                            return $(this).val() !== ''; 
                        }).length > 0) {
                            // Only validate if any date field in this section has a value
                            $(this).addClass('is-invalid');
                            isValid = false;
                        }
                    } else {
                        $(this).removeClass('is-invalid');
                    }
                });
                
                return isValid;
            });
            
            // Clear validation on input
            $('.assignee-field').on('input', function() {
                if ($(this).val().trim() !== '') {
                    $(this).removeClass('is-invalid');
                }
            });
        });
    </script>
} 